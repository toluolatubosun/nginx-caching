# This is the number of worker processes that will be started when Nginx is started.
# The optimal value depends on the number of CPU cores in the server.
# The more worker processes, the more requests can be processed at the same time.
# In production environments, it is recommended to set this value to the number of CPU cores.
worker_processes 1;
# worker_processes auto;

events {
    # How many connections can be handled at the same time by each worker process.
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;

    # Specify the directory where the cache will be stored.
    # levels=1:2: Defines the directory structure for the cache. 
    #             The first level will have one character, and the second level will have two characters. 
    #              This helps in distributing the cache files into subdirectories.
    # keys_zone=my-cache:10m: Defines the name of the cache and the size of the cache keys and metadata.
    # max_size=10g: Defines the maximum size of the cache. When the cache size exceeds this value, the least recently used cache files will be removed.
    # inactive=60m: Defines the time after which the cache files will be removed if they are not accessed.
    # use_temp_path=off: Disables the use of the temporary directory for storing cache files.
    proxy_cache_path /usr/share/nginx/cache levels=1:2 keys_zone=my-cache:100m max_size=10g inactive=60m use_temp_path=off;
 
    upstream the-app { 
        server the-app-1:3000;
    }

    server {
        listen 8081;
        # The domain name that the server will respond to.
        server_name localhost;

        location / {
            # The server group that requests will be sent to.
            proxy_pass http://the-app;

            # Specifies the cache that will be used for storing the responses.
            proxy_cache my-cache;
            # Response with status codes 200 and 302 will be cached for 60 minutes.
            proxy_cache_valid 200 302 60m;
            # Adds the X-Proxy-Cache header to the response to indicate whether the response was served from the cache.
            add_header X-Proxy-Cache $upstream_cache_status;
            # Specifies the headers that will be ignored. Ignoring the Cache-Control header allows the cache to store responses even if they have a Cache-Control header.
            # This directive can help ensure that responses are cached according to the rules specified in your Nginx configuration, rather than being influenced by the upstream server's headers.
            proxy_ignore_headers Cache-Control;
        }
    }
}